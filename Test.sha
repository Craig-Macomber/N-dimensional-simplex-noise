//Cg


float simplex2(in float2 loc, out float2 der, uniform sampler1D vecTex){
    const int d=2;
    const float f=0.366025403784;
    const float g=0.211324865405;
    const float cornerToFaceSquared=0.5*.9;
    const float valueScaler=113.0;
    const int vecCount=4;

    const float2 randomizerVec=float2(181.4813,9787.7541);
    
    float s=(loc.x+loc.y)*f;
    int2 intSkewLoc=floor(loc+s);
    float t2=(intSkewLoc.x+intSkewLoc.y)*g;
    float2 cellDist=loc-intSkewLoc+t2;

    float t=max(0,cornerToFaceSquared-dot(cellDist,cellDist));

    float2 vx=intSkewLoc*randomizerVec;
    float index=vx.x+vx.y;
    float2 vec=tex1D(vecTex,frac(index/vecCount)).xy-1.0;
    float gr=dot(vec,cellDist);
    float t4=pow(t,4);
    float n=gr*t4;
    der=vec*t4-gr*8*pow(t,3)*cellDist;

    float skewOffset=g;
    int2 intLoc=intSkewLoc;
    bool doX=cellDist.x>cellDist.y;
    
    for (int i=1; i<=d; i++){
        doX ? intLoc.x++ : intLoc.y++;
        doX=!doX;

        float2 u=cellDist-(intLoc-intSkewLoc)+skewOffset;
        t=max(0,cornerToFaceSquared-dot(u,u));
        
        vx=(intLoc)*randomizerVec;
        index=vx.x+vx.y;
        vec=tex1D(vecTex,frac(index/vecCount)).xy-1.0;
        gr=dot(vec,u);
        t4=pow(t,4);
        n+=gr*t4;
        der+=vec*t4-gr*8*pow(t,3)*u;

        skewOffset+=g;
    }
    der*=valueScaler;
    return n*valueScaler;
}

float simplex3(in float3 loc, out float3 der, uniform sampler1D vecTex){
    const int d=3;
    const float f=0.333333333333;
    const float g=0.166666666667;
    const float cornerToFaceSquared=0.703125*.9;
    const float valueScaler=15.4423881554;
    const int vecCount=12;
    
    const float3 randomizerVec=float3(181.4813,787.7541,1646.2698);
    
    float s=(loc.x+loc.y+loc.z)*f;
    int3 intSkewLoc=floor(loc+s);
    float t2=(intSkewLoc.x+intSkewLoc.y+intSkewLoc.z)*g;
    float3 cellDist=loc-intSkewLoc+t2;

    float t=max(0,cornerToFaceSquared-dot(cellDist,cellDist));

    float3 vx=intSkewLoc*randomizerVec;
    float index=vx.x+vx.y+vx.z;
    float3 vec=tex1D(vecTex,frac(index/vecCount)).xyz-1.0;
    float gr=dot(vec,cellDist);
    float t4=pow(t,4);
    float n=gr*t4;
    der=vec*t4-gr*8*pow(t,3)*cellDist;

    float skewOffset=g;
    float3 c=cellDist;
    int3 intLoc=intSkewLoc;
    
    for (int i=1; i<=d; i++){
        float m=max(max(c.x,c.y),c.z);
        /*
        bool3 b=c>=float3(m);
        c = b ? -1.0 : c;
        intLoc=b ? intLoc+1 : intLoc;
        */
        if (c.x>=m) {c.x=-1;intLoc.x++;}
        else if (c.y>=m) {c.y=-1;intLoc.y++;}
        else{c.z=-1;intLoc.z++;}
        

        float3 u=cellDist-(intLoc-intSkewLoc)+skewOffset;
        t=max(0,cornerToFaceSquared-dot(u,u));
        
        vx=(intLoc)*randomizerVec;
        index=vx.x+vx.y+vx.z;
        vec=tex1D(vecTex,frac(index/vecCount)).xyz-1.0;
        gr=dot(vec,u);
        t4=pow(t,4);
        n+=gr*t4;
        der+=vec*t4-gr*8*pow(t,3)*u;

        skewOffset+=g;
    }
    der*=valueScaler;
    return n*valueScaler;
}

float simplex4(in float4 loc, out float4 der, uniform sampler1D vecTex){
    const int d=4;
    const float f=0.309016994375;
    const float g=0.138196601125;
    const float cornerToFaceSquared=0.75*.85;
    const float valueScaler=8.7401214007;
    const int vecCount=32;
    
    const float4 randomizerVec=float4(181.4813,787.7541,1646.2698,15459.1558);
    
    float s=(loc.x+loc.y+loc.z+loc.w)*f;
    int4 intSkewLoc=floor(loc+s);
    float t2=(intSkewLoc.x+intSkewLoc.y+intSkewLoc.z+intSkewLoc.w)*g;
    float4 cellDist=loc-intSkewLoc+t2;

    float t=max(0,cornerToFaceSquared-dot(cellDist,cellDist));

    float4 vx=intSkewLoc*randomizerVec; //Needs hash
    float2 indexV=vx.xy+vx.zw;
    float index=indexV.x+indexV.y;
    float4 vec=tex1D(vecTex,frac(index/vecCount))-1.0;
    float gr=dot(vec,cellDist);
    float t4=pow(t,4);
    float n=gr*t4;
    der=vec*t4-gr*8*pow(t,3)*cellDist;

    float skewOffset=g;
    float4 c=cellDist;
    int4 intLoc=intSkewLoc;
    
    for (int i=1; i<=d; i++){
        
        float2 mv=max(c.xy,c.zw);
        float m=max(mv.x,mv.y);
        /*
        bool4 b=c>=float4(m);
        c = b ? -1.0 : c;
        intLoc=b ? intLoc+1 : intLoc;
        */
        if (c.x>=m) {c.x=-1;intLoc.x++;}
        else if (c.y>=m) {c.y=-1;intLoc.y++;}
        else if (c.z>=m) {c.z=-1;intLoc.z++;}
        else{c.w=-1;intLoc.w++;}


        float4 u=cellDist-(intLoc-intSkewLoc)+skewOffset;
        float t=max(0,cornerToFaceSquared-dot(u,u));
        
        float4 vx=(intLoc)*randomizerVec; //Needs hash
        float2 indexV=vx.xy+vx.zw;
        float index=indexV.x+indexV.y;
        float4 vec=tex1D(vecTex,frac(index/vecCount))-1.0;
        float gr=dot(vec,u);
        float t4=pow(t,4);
        n+=gr*t4;
        der+=vec*t4-gr*8*pow(t,3)*u;

        skewOffset+=g;
    }
    der*=valueScaler;
    return n*valueScaler;
}


void vshader( 
  in uniform float4x4 mat_modelproj, 
  in float4 vtx_position: POSITION, 
  out float4 l_position: POSITION,
  out float4 l_pos) 
{ 
  l_pos=vtx_position;  
  l_position = mul(mat_modelproj, vtx_position);
} 


void fshader( 
  in float4 l_pos,
  in uniform float4 k_time,
  in sampler1D tex_0: TEXUNIT0,
  out float4 o_color: COLOR) 
{   
    float t=k_time.x;
    float2 loc=(float2(l_pos.xz)+t/500)*2;
    float2 der=float2(0);
    float v=0;
    float2 der2;
    float scale=1.307;
    for( int i=0; i<4 ; i++){
        loc+=float2(9.36,1.251);
        v+=simplex2(loc*pow(scale,i),der2,tex_0)/pow(scale,i);
        der+=der2;
    }



/*
    float t=k_time.x;
    float3 loc=float3(l_pos.xz,t/500)*2;
    float3 der=float3(0);
    float v=0;
    float3 der2;
    float scale=2.307;
    for( int i=0; i<1 ; i++){
        loc+=float3(9.36,1.251,7.25);
        v+=simplex3(loc*pow(scale,i),der2,tex_0)/pow(scale,i);
        der+=der2;
    }
    
    */
    
    /*
    float4 loc=float4(l_pos.xzy,t/500)*2;
    float4 der=float4(0);
    float v=0;
    float4 der2;
    float scale=2.307;
    for( int i=0; i<1 ; i++){
        loc+=float4(9.36,1.251,26.3,7.25);
        v+=simplex4(loc*pow(scale,i),der2,tex_0)/pow(scale,i);
        der+=der2;
    }

*/


    der*=.1;
    float3 norm=normalize(float3(der.xy,1));
    float3 lightDir=normalize(float3(1,1,1));
    
    //o_color=float4(float3((v*2+1)/2),1);
    o_color=float4(dot(lightDir,norm)*float3(1,(v*2+1)/2,1),1);
}